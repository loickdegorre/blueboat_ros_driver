// Generated by gencpp from file bboat_pkg/path_description_servResponse.msg
// DO NOT EDIT!


#ifndef BBOAT_PKG_MESSAGE_PATH_DESCRIPTION_SERVRESPONSE_H
#define BBOAT_PKG_MESSAGE_PATH_DESCRIPTION_SERVRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bboat_pkg
{
template <class ContainerAllocator>
struct path_description_servResponse_
{
  typedef path_description_servResponse_<ContainerAllocator> Type;

  path_description_servResponse_()
    : x()
    , y()
    , s()
    , phi_f()
    , curvature()
    , g_c()
    , dx()
    , dy()
    , ddx()
    , ddy()  {
    }
  path_description_servResponse_(const ContainerAllocator& _alloc)
    : x(_alloc)
    , y(_alloc)
    , s(_alloc)
    , phi_f(_alloc)
    , curvature(_alloc)
    , g_c(_alloc)
    , dx(_alloc)
    , dy(_alloc)
    , ddx(_alloc)
    , ddy(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _x_type;
  _x_type x;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _y_type;
  _y_type y;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _s_type;
  _s_type s;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _phi_f_type;
  _phi_f_type phi_f;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _curvature_type;
  _curvature_type curvature;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _g_c_type;
  _g_c_type g_c;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _dx_type;
  _dx_type dx;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _dy_type;
  _dy_type dy;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _ddx_type;
  _ddx_type ddx;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _ddy_type;
  _ddy_type ddy;





  typedef boost::shared_ptr< ::bboat_pkg::path_description_servResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bboat_pkg::path_description_servResponse_<ContainerAllocator> const> ConstPtr;

}; // struct path_description_servResponse_

typedef ::bboat_pkg::path_description_servResponse_<std::allocator<void> > path_description_servResponse;

typedef boost::shared_ptr< ::bboat_pkg::path_description_servResponse > path_description_servResponsePtr;
typedef boost::shared_ptr< ::bboat_pkg::path_description_servResponse const> path_description_servResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bboat_pkg::path_description_servResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bboat_pkg::path_description_servResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bboat_pkg::path_description_servResponse_<ContainerAllocator1> & lhs, const ::bboat_pkg::path_description_servResponse_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.s == rhs.s &&
    lhs.phi_f == rhs.phi_f &&
    lhs.curvature == rhs.curvature &&
    lhs.g_c == rhs.g_c &&
    lhs.dx == rhs.dx &&
    lhs.dy == rhs.dy &&
    lhs.ddx == rhs.ddx &&
    lhs.ddy == rhs.ddy;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bboat_pkg::path_description_servResponse_<ContainerAllocator1> & lhs, const ::bboat_pkg::path_description_servResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bboat_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::bboat_pkg::path_description_servResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bboat_pkg::path_description_servResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bboat_pkg::path_description_servResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bboat_pkg::path_description_servResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bboat_pkg::path_description_servResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bboat_pkg::path_description_servResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bboat_pkg::path_description_servResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "708adc44b97d996f881dbcca00b89ef2";
  }

  static const char* value(const ::bboat_pkg::path_description_servResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x708adc44b97d996fULL;
  static const uint64_t static_value2 = 0x881dbcca00b89ef2ULL;
};

template<class ContainerAllocator>
struct DataType< ::bboat_pkg::path_description_servResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bboat_pkg/path_description_servResponse";
  }

  static const char* value(const ::bboat_pkg::path_description_servResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bboat_pkg::path_description_servResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] x\n"
"float64[] y\n"
"float64[] s\n"
"float64[] phi_f\n"
"float64[] curvature\n"
"float64[] g_c\n"
"float64[] dx\n"
"float64[] dy\n"
"float64[] ddx\n"
"float64[] ddy\n"
;
  }

  static const char* value(const ::bboat_pkg::path_description_servResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bboat_pkg::path_description_servResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.s);
      stream.next(m.phi_f);
      stream.next(m.curvature);
      stream.next(m.g_c);
      stream.next(m.dx);
      stream.next(m.dy);
      stream.next(m.ddx);
      stream.next(m.ddy);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct path_description_servResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bboat_pkg::path_description_servResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bboat_pkg::path_description_servResponse_<ContainerAllocator>& v)
  {
    s << indent << "x[]" << std::endl;
    for (size_t i = 0; i < v.x.size(); ++i)
    {
      s << indent << "  x[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.x[i]);
    }
    s << indent << "y[]" << std::endl;
    for (size_t i = 0; i < v.y.size(); ++i)
    {
      s << indent << "  y[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.y[i]);
    }
    s << indent << "s[]" << std::endl;
    for (size_t i = 0; i < v.s.size(); ++i)
    {
      s << indent << "  s[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.s[i]);
    }
    s << indent << "phi_f[]" << std::endl;
    for (size_t i = 0; i < v.phi_f.size(); ++i)
    {
      s << indent << "  phi_f[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.phi_f[i]);
    }
    s << indent << "curvature[]" << std::endl;
    for (size_t i = 0; i < v.curvature.size(); ++i)
    {
      s << indent << "  curvature[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.curvature[i]);
    }
    s << indent << "g_c[]" << std::endl;
    for (size_t i = 0; i < v.g_c.size(); ++i)
    {
      s << indent << "  g_c[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.g_c[i]);
    }
    s << indent << "dx[]" << std::endl;
    for (size_t i = 0; i < v.dx.size(); ++i)
    {
      s << indent << "  dx[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.dx[i]);
    }
    s << indent << "dy[]" << std::endl;
    for (size_t i = 0; i < v.dy.size(); ++i)
    {
      s << indent << "  dy[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.dy[i]);
    }
    s << indent << "ddx[]" << std::endl;
    for (size_t i = 0; i < v.ddx.size(); ++i)
    {
      s << indent << "  ddx[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.ddx[i]);
    }
    s << indent << "ddy[]" << std::endl;
    for (size_t i = 0; i < v.ddy.size(); ++i)
    {
      s << indent << "  ddy[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.ddy[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BBOAT_PKG_MESSAGE_PATH_DESCRIPTION_SERVRESPONSE_H
