// Generated by gencpp from file bboat_pkg/mode_msg.msg
// DO NOT EDIT!


#ifndef BBOAT_PKG_MESSAGE_MODE_MSG_H
#define BBOAT_PKG_MESSAGE_MODE_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bboat_pkg
{
template <class ContainerAllocator>
struct mode_msg_
{
  typedef mode_msg_<ContainerAllocator> Type;

  mode_msg_()
    : mode()
    , mission()  {
    }
  mode_msg_(const ContainerAllocator& _alloc)
    : mode(_alloc)
    , mission(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _mode_type;
  _mode_type mode;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _mission_type;
  _mission_type mission;





  typedef boost::shared_ptr< ::bboat_pkg::mode_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bboat_pkg::mode_msg_<ContainerAllocator> const> ConstPtr;

}; // struct mode_msg_

typedef ::bboat_pkg::mode_msg_<std::allocator<void> > mode_msg;

typedef boost::shared_ptr< ::bboat_pkg::mode_msg > mode_msgPtr;
typedef boost::shared_ptr< ::bboat_pkg::mode_msg const> mode_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bboat_pkg::mode_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bboat_pkg::mode_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bboat_pkg::mode_msg_<ContainerAllocator1> & lhs, const ::bboat_pkg::mode_msg_<ContainerAllocator2> & rhs)
{
  return lhs.mode == rhs.mode &&
    lhs.mission == rhs.mission;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bboat_pkg::mode_msg_<ContainerAllocator1> & lhs, const ::bboat_pkg::mode_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bboat_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::bboat_pkg::mode_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bboat_pkg::mode_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bboat_pkg::mode_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bboat_pkg::mode_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bboat_pkg::mode_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bboat_pkg::mode_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bboat_pkg::mode_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6609a085032a3aa05e4e4147b4c8d4d3";
  }

  static const char* value(const ::bboat_pkg::mode_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6609a085032a3aa0ULL;
  static const uint64_t static_value2 = 0x5e4e4147b4c8d4d3ULL;
};

template<class ContainerAllocator>
struct DataType< ::bboat_pkg::mode_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bboat_pkg/mode_msg";
  }

  static const char* value(const ::bboat_pkg::mode_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bboat_pkg::mode_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string mode\n"
"string mission\n"
;
  }

  static const char* value(const ::bboat_pkg::mode_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bboat_pkg::mode_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
      stream.next(m.mission);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mode_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bboat_pkg::mode_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bboat_pkg::mode_msg_<ContainerAllocator>& v)
  {
    s << indent << "mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.mode);
    s << indent << "mission: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.mission);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BBOAT_PKG_MESSAGE_MODE_MSG_H
