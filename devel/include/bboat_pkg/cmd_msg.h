// Generated by gencpp from file bboat_pkg/cmd_msg.msg
// DO NOT EDIT!


#ifndef BBOAT_PKG_MESSAGE_CMD_MSG_H
#define BBOAT_PKG_MESSAGE_CMD_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>

namespace bboat_pkg
{
template <class ContainerAllocator>
struct cmd_msg_
{
  typedef cmd_msg_<ContainerAllocator> Type;

  cmd_msg_()
    : u1()
    , u2()  {
    }
  cmd_msg_(const ContainerAllocator& _alloc)
    : u1(_alloc)
    , u2(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Float64_<ContainerAllocator>  _u1_type;
  _u1_type u1;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _u2_type;
  _u2_type u2;





  typedef boost::shared_ptr< ::bboat_pkg::cmd_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bboat_pkg::cmd_msg_<ContainerAllocator> const> ConstPtr;

}; // struct cmd_msg_

typedef ::bboat_pkg::cmd_msg_<std::allocator<void> > cmd_msg;

typedef boost::shared_ptr< ::bboat_pkg::cmd_msg > cmd_msgPtr;
typedef boost::shared_ptr< ::bboat_pkg::cmd_msg const> cmd_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bboat_pkg::cmd_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bboat_pkg::cmd_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bboat_pkg::cmd_msg_<ContainerAllocator1> & lhs, const ::bboat_pkg::cmd_msg_<ContainerAllocator2> & rhs)
{
  return lhs.u1 == rhs.u1 &&
    lhs.u2 == rhs.u2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bboat_pkg::cmd_msg_<ContainerAllocator1> & lhs, const ::bboat_pkg::cmd_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bboat_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::bboat_pkg::cmd_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bboat_pkg::cmd_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bboat_pkg::cmd_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bboat_pkg::cmd_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bboat_pkg::cmd_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bboat_pkg::cmd_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bboat_pkg::cmd_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "565f2132c1adf413c58d2ae5bf8d97b9";
  }

  static const char* value(const ::bboat_pkg::cmd_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x565f2132c1adf413ULL;
  static const uint64_t static_value2 = 0xc58d2ae5bf8d97b9ULL;
};

template<class ContainerAllocator>
struct DataType< ::bboat_pkg::cmd_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bboat_pkg/cmd_msg";
  }

  static const char* value(const ::bboat_pkg::cmd_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bboat_pkg::cmd_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Float64 u1\n"
"std_msgs/Float64 u2\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
;
  }

  static const char* value(const ::bboat_pkg::cmd_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bboat_pkg::cmd_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.u1);
      stream.next(m.u2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cmd_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bboat_pkg::cmd_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bboat_pkg::cmd_msg_<ContainerAllocator>& v)
  {
    s << indent << "u1: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.u1);
    s << indent << "u2: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.u2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BBOAT_PKG_MESSAGE_CMD_MSG_H
