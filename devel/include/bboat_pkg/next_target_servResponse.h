// Generated by gencpp from file bboat_pkg/next_target_servResponse.msg
// DO NOT EDIT!


#ifndef BBOAT_PKG_MESSAGE_NEXT_TARGET_SERVRESPONSE_H
#define BBOAT_PKG_MESSAGE_NEXT_TARGET_SERVRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace bboat_pkg
{
template <class ContainerAllocator>
struct next_target_servResponse_
{
  typedef next_target_servResponse_<ContainerAllocator> Type;

  next_target_servResponse_()
    : next_trgt_pose()
    , continuing_mission(false)  {
    }
  next_target_servResponse_(const ContainerAllocator& _alloc)
    : next_trgt_pose(_alloc)
    , continuing_mission(false)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _next_trgt_pose_type;
  _next_trgt_pose_type next_trgt_pose;

   typedef uint8_t _continuing_mission_type;
  _continuing_mission_type continuing_mission;





  typedef boost::shared_ptr< ::bboat_pkg::next_target_servResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bboat_pkg::next_target_servResponse_<ContainerAllocator> const> ConstPtr;

}; // struct next_target_servResponse_

typedef ::bboat_pkg::next_target_servResponse_<std::allocator<void> > next_target_servResponse;

typedef boost::shared_ptr< ::bboat_pkg::next_target_servResponse > next_target_servResponsePtr;
typedef boost::shared_ptr< ::bboat_pkg::next_target_servResponse const> next_target_servResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bboat_pkg::next_target_servResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bboat_pkg::next_target_servResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bboat_pkg::next_target_servResponse_<ContainerAllocator1> & lhs, const ::bboat_pkg::next_target_servResponse_<ContainerAllocator2> & rhs)
{
  return lhs.next_trgt_pose == rhs.next_trgt_pose &&
    lhs.continuing_mission == rhs.continuing_mission;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bboat_pkg::next_target_servResponse_<ContainerAllocator1> & lhs, const ::bboat_pkg::next_target_servResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bboat_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::bboat_pkg::next_target_servResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bboat_pkg::next_target_servResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bboat_pkg::next_target_servResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bboat_pkg::next_target_servResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bboat_pkg::next_target_servResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bboat_pkg::next_target_servResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bboat_pkg::next_target_servResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "134a9f41a53729bf70f386ba88fcc491";
  }

  static const char* value(const ::bboat_pkg::next_target_servResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x134a9f41a53729bfULL;
  static const uint64_t static_value2 = 0x70f386ba88fcc491ULL;
};

template<class ContainerAllocator>
struct DataType< ::bboat_pkg::next_target_servResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bboat_pkg/next_target_servResponse";
  }

  static const char* value(const ::bboat_pkg::next_target_servResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bboat_pkg::next_target_servResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Pose next_trgt_pose\n"
"bool continuing_mission\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::bboat_pkg::next_target_servResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bboat_pkg::next_target_servResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.next_trgt_pose);
      stream.next(m.continuing_mission);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct next_target_servResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bboat_pkg::next_target_servResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bboat_pkg::next_target_servResponse_<ContainerAllocator>& v)
  {
    s << indent << "next_trgt_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.next_trgt_pose);
    s << indent << "continuing_mission: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.continuing_mission);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BBOAT_PKG_MESSAGE_NEXT_TARGET_SERVRESPONSE_H
