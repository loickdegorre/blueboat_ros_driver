// Generated by gencpp from file bboat_pkg/gain_servResponse.msg
// DO NOT EDIT!


#ifndef BBOAT_PKG_MESSAGE_GAIN_SERVRESPONSE_H
#define BBOAT_PKG_MESSAGE_GAIN_SERVRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>

namespace bboat_pkg
{
template <class ContainerAllocator>
struct gain_servResponse_
{
  typedef gain_servResponse_<ContainerAllocator> Type;

  gain_servResponse_()
    : kp_1()
    , ki_1()
    , kd_1()
    , kp_2()
    , ki_2()
    , kd_2()  {
    }
  gain_servResponse_(const ContainerAllocator& _alloc)
    : kp_1(_alloc)
    , ki_1(_alloc)
    , kd_1(_alloc)
    , kp_2(_alloc)
    , ki_2(_alloc)
    , kd_2(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Float64_<ContainerAllocator>  _kp_1_type;
  _kp_1_type kp_1;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _ki_1_type;
  _ki_1_type ki_1;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _kd_1_type;
  _kd_1_type kd_1;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _kp_2_type;
  _kp_2_type kp_2;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _ki_2_type;
  _ki_2_type ki_2;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _kd_2_type;
  _kd_2_type kd_2;





  typedef boost::shared_ptr< ::bboat_pkg::gain_servResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bboat_pkg::gain_servResponse_<ContainerAllocator> const> ConstPtr;

}; // struct gain_servResponse_

typedef ::bboat_pkg::gain_servResponse_<std::allocator<void> > gain_servResponse;

typedef boost::shared_ptr< ::bboat_pkg::gain_servResponse > gain_servResponsePtr;
typedef boost::shared_ptr< ::bboat_pkg::gain_servResponse const> gain_servResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bboat_pkg::gain_servResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bboat_pkg::gain_servResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bboat_pkg::gain_servResponse_<ContainerAllocator1> & lhs, const ::bboat_pkg::gain_servResponse_<ContainerAllocator2> & rhs)
{
  return lhs.kp_1 == rhs.kp_1 &&
    lhs.ki_1 == rhs.ki_1 &&
    lhs.kd_1 == rhs.kd_1 &&
    lhs.kp_2 == rhs.kp_2 &&
    lhs.ki_2 == rhs.ki_2 &&
    lhs.kd_2 == rhs.kd_2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bboat_pkg::gain_servResponse_<ContainerAllocator1> & lhs, const ::bboat_pkg::gain_servResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bboat_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::bboat_pkg::gain_servResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bboat_pkg::gain_servResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bboat_pkg::gain_servResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bboat_pkg::gain_servResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bboat_pkg::gain_servResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bboat_pkg::gain_servResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bboat_pkg::gain_servResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e3308e00b5029dc92caf544598a5631d";
  }

  static const char* value(const ::bboat_pkg::gain_servResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe3308e00b5029dc9ULL;
  static const uint64_t static_value2 = 0x2caf544598a5631dULL;
};

template<class ContainerAllocator>
struct DataType< ::bboat_pkg::gain_servResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bboat_pkg/gain_servResponse";
  }

  static const char* value(const ::bboat_pkg::gain_servResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bboat_pkg::gain_servResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Float64 kp_1\n"
"std_msgs/Float64 ki_1\n"
"std_msgs/Float64 kd_1\n"
"std_msgs/Float64 kp_2\n"
"std_msgs/Float64 ki_2\n"
"std_msgs/Float64 kd_2\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
;
  }

  static const char* value(const ::bboat_pkg::gain_servResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bboat_pkg::gain_servResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.kp_1);
      stream.next(m.ki_1);
      stream.next(m.kd_1);
      stream.next(m.kp_2);
      stream.next(m.ki_2);
      stream.next(m.kd_2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gain_servResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bboat_pkg::gain_servResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bboat_pkg::gain_servResponse_<ContainerAllocator>& v)
  {
    s << indent << "kp_1: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.kp_1);
    s << indent << "ki_1: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.ki_1);
    s << indent << "kd_1: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.kd_1);
    s << indent << "kp_2: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.kp_2);
    s << indent << "ki_2: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.ki_2);
    s << indent << "kd_2: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.kd_2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BBOAT_PKG_MESSAGE_GAIN_SERVRESPONSE_H
